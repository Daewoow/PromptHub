@page "/edititem/{Id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject UIPromptService UiPromptService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Edit UIPrompt</h3>

@if (_editUiPrompt == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_editUiPrompt" FormName="Edit Form" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>NameOfUIUser: </label>
            <InputText class="form-control" id="nameOfUser" @bind-Value="_editUiPrompt.NameOfUser" />
        </div>
        <div>
            <label>NameOfUIPrompt: </label>
            <InputText class="form-control" id="nameOfPrompt" @bind-Value="_editUiPrompt.NameOfPrompt" />
        </div>
        <div>
            <label>Description: </label>
            <InputText class="form-control" id="description" @bind-Value="_editUiPrompt.Description" />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
    </EditForm>

    <h4 class="mt-4">History of Changes</h4>
    @if (_history.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>NameOfUser</th>
                    <th>NameOfPrompt</th>
                    <th>Description</th>
                    <th>TimeOfUpdate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var historyItem in _history)
                {
                    <tr>
                        <td>@historyItem.NameOfUser</td>
                        <td>@historyItem.NameOfPrompt</td>
                        <td>@historyItem.Description</td>
                        <td>@historyItem.TimeOfUpdate</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No history available.</p>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }
    private UIPrompt _editUiPrompt;
    private List<PromptHistory> _history = new();

    protected override async Task OnInitializedAsync()
    {
        _editUiPrompt = await UiPromptService.ReadPromptAsync(int.Parse(Id));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Загрузка истории из localStorage после первой отрисовки
            await LoadHistoryFromLocalStorage();
            StateHasChanged(); // Уведомляем Blazor о необходимости перерисовки
        }
    }

    private async Task HandleValidSubmit()
    {
        // Сохранение текущего состояния в историю
        var historyItem = new PromptHistory
        {
            NameOfUser = _editUiPrompt.NameOfUser,
            NameOfPrompt = _editUiPrompt.NameOfPrompt,
            Description = _editUiPrompt.Description,
            TimeOfUpdate = DateTimeOffset.UtcNow
        };

        _history.Add(historyItem);

        // Сохранение истории в localStorage
        await SaveHistoryToLocalStorage();

        // Обновление промпта на сервере
        _editUiPrompt.TimeOfUpdate = DateTime.Now;
        await UiPromptService.UpdatePromptAsync(_editUiPrompt);
        NavigationManager.NavigateTo("/promptslist");
    }

    private async Task SaveHistoryToLocalStorage()
    {
        // Сериализация истории в JSON и сохранение в localStorage
        var historyJson = System.Text.Json.JsonSerializer.Serialize(_history);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "promptHistory", historyJson);
    }

    private async Task LoadHistoryFromLocalStorage()
    {
        // Загрузка истории из localStorage
        var historyJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "promptHistory");
        if (!string.IsNullOrEmpty(historyJson))
        {
            _history = System.Text.Json.JsonSerializer.Deserialize<List<PromptHistory>>(historyJson);
        }
    }

    private class PromptHistory
    {
        public string NameOfUser { get; set; }
        public string NameOfPrompt { get; set; }
        public string Description { get; set; }
        public DateTimeOffset TimeOfUpdate { get; set; }
    }
}