@page "/edititem/{Id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject UIPromptService UiPromptService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Edit UIPrompt</h3>

@if (_editUiPrompt == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="_editUiPrompt" FormName="Edit Form" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>NameOfUIUser: </label>
            <InputText class="form-control" id="nameOfUser" @bind-Value="_editUiPrompt.NameOfUser" />
        </div>
        <div>
            <label>NameOfUIPrompt: </label>
            <InputText class="form-control" id="nameOfPrompt" @bind-Value="_editUiPrompt.NameOfPrompt" />
        </div>
        <div>
            <label>Description: </label>
            <InputText class="form-control" id="description" @bind-Value="_editUiPrompt.Description" />
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
    </EditForm>

    <h4 class="mt-4">History of Changes</h4>
    @if (_editUiPrompt.History != null && _editUiPrompt.History.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>NameOfUser</th>
                    <th>NameOfPrompt</th>
                    <th>Description</th>
                    <th>TimeOfUpdate</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var historyItem in _editUiPrompt.History)
                {
                    <tr>
                        <td>@historyItem.NameOfUser</td>
                        <td>@historyItem.NameOfPrompt</td>
                        <td>@historyItem.Description</td>
                        <td>@historyItem.TimeOfUpdate</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No history available.</p>
    }
}

@code {
    [Parameter]
    public string Id { get; set; }
    private UIPrompt _editUiPrompt;

    protected override async Task OnInitializedAsync()
    {
        _editUiPrompt = await UiPromptService.ReadPromptAsync(int.Parse(Id));
    }

    private async Task HandleValidSubmit()
    {
        if (_editUiPrompt.History == null)
        {
            _editUiPrompt.History = new List<UIPrompt>();
        }
        _editUiPrompt.History.Add(new UIPrompt
        {
            NameOfUser = _editUiPrompt.NameOfUser,
            NameOfPrompt = _editUiPrompt.NameOfPrompt,
            Description = _editUiPrompt.Description,
            TimeOfUpdate = _editUiPrompt.TimeOfUpdate
        });

        _editUiPrompt.TimeOfUpdate = DateTime.Now;

        await UiPromptService.UpdatePromptAsync(_editUiPrompt);
        NavigationManager.NavigateTo("/promptslist");
    }
}