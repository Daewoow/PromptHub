@page "/createprompt"
@attribute [Authorize]
@using System.IdentityModel.Tokens.Jwt
@using BlazorApp1.Models
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Authorization
@inject UIPromptService UiPromptService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
<h3>Create New Prompt</h3>

<EditForm EditContext="@editContext" Model="_newUiPrompt" FormName="Create New Task" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <label for="nameOfPrompt">NameOfPrompt: </label>
        <InputText id="nameOfPrompt" class="form-control" @bind-Value="_newUiPrompt.NameOfPrompt" />
    </div>
    <div>
        <label for="description">Description: </label>
        <InputText id="description" class="form-control" @bind-Value="_newUiPrompt.Description" />
    </div>
    <div>
        <label>
            Публичный?
            <InputCheckbox @bind-Value="_newUiPrompt.IsPublic" />
        </label>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private UIPrompt _newUiPrompt = new();
    private EditContext editContext;
    private string name;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "jwtToken");
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadJwtToken(token);
            var nameStringArray = jsonToken.Claims
                .First().ToString()
                .Split(" ")
                .Skip(1);

            name = string.Join(" ", nameStringArray);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            _newUiPrompt.NameOfUser = name;
            _newUiPrompt.TimeOfUpdate = DateTime.Now.ToUniversalTime();
            await UiPromptService.CreatePromptAsync(_newUiPrompt);
            NavigationManager.NavigateTo("/promptslist");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            throw;
        }
    }
}