@page "/promptslist"
@using System.Globalization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.AspNetCore.Authorization
@using BlazorApp1.Models
@inject IJSRuntime JsRuntime
@using BlazorApp1.Services
@inject UIPromptService UiPromptService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Prompts List</h3>

<div class="mb-3">
    <label for="searchInput" class="form-label">Search:</label>
    <input id="searchInput" class="form-control" @bind="searchQuery" placeholder="Enter prompt name..." />
</div>

@if (_promptItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Имя пользователя</th>
                <th>Имя промпта</th>
                <th>Время обновления</th>
                <th>Опции</th>
            </tr>
        </thead>
        <tbody>
            @if (_promptItems == null)
            {
                <tr>
                    <td colspan="4" class="text-center">Loading...</td>
                </tr>
            }
            else if (_promptItems.Count == 0 || !filteredPrompts.Any())
            {
                <tr>
                    <td colspan="4" class="text-center">No prompts available.</td>
                </tr>
            }
            else
            {
                @foreach (var prompt in filteredPrompts.Where(p => p.NameOfPrompt == _name || p.IsPublic))
                {
                    <tr>
                        <td>@prompt.NameOfUser</td>
                        <td>@prompt.NameOfPrompt</td>
                        <td>@prompt.TimeOfUpdate.ToString(CultureInfo.InvariantCulture)</td>
                        <td>
                            <button class="btn btn-success btn-sm" @onclick="() => OpenPrompt(prompt.PromptId)">Open</button>
                            <button class="btn btn-info btn-sm" @onclick="() => EditPrompt(prompt.PromptId)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(prompt.PromptId)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <button class="btn btn-info" @onclick="CreatePrompt">Create</button>
}

@code 
{
    private string _name;
    private List<UIPrompt> _promptItems;
    private string searchQuery = string.Empty;

    private IEnumerable<UIPrompt> filteredPrompts => 
        string.IsNullOrWhiteSpace(searchQuery) 
            ? _promptItems 
            : _promptItems.Where(p => 
                p.NameOfPrompt.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                p.NameOfUser.Contains(searchQuery, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _promptItems = await UiPromptService.ReadAllAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await JsRuntime.InvokeAsync<string?>("localStorage.getItem", "jwtToken");
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadJwtToken(token);
            var nameStringArray = jsonToken.Claims
                .First().ToString()
                .Split(" ")
                .Skip(1);

            _name = string.Join(" ", nameStringArray);
        }
    }

    private void CreatePrompt() => NavigationManager.NavigateTo("/createprompt");

    private void OpenPrompt(int id) => NavigationManager.NavigateTo($"/openitem/{id}");

    private void EditPrompt(int id) => NavigationManager.NavigateTo($"/edititem/{id}");

    private async Task DeletePrompt(int id)
    {
        await UiPromptService.DeletePromptAsync(id);
        _promptItems = await UiPromptService.ReadAllAsync();
    }

    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Вы уверены, что хотите удалить?");
        if (confirmed)
            await DeletePrompt(id);
    }
}